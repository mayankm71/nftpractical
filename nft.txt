pragma solidity 0.8.0;
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppein/comntracts/token/ERC721.sol";
import "@openzeppelin/contracts/ownable.sol";
import "@openzeppelin/contracts/utils/counters.sol";
import "@openzeppelin/contracts/utils/Security.sol";
import "./IContent.sol";
import "hardhot/console.sol";
contract MyNFT is ERC721, Ownable,ReentrancyGuard{
using counters for counters.counter;
counters.counter private_tokenIds;
mapping(uint256 =>IContent.item)content;
uint256 price = 5000000000000;
address public renderingCntractAddress'
event NewItem(address sender,uint256 tokenId,string me);
constructer()ERC721 ("MYNFT","MYCOLLECTION"){
Function generateNFT(string calldata)
require(msg.value>= price,"not enoughEth send;check price");
uint newItemId = _tokenIds.current();
if (newItemId>= 10000){
revert("this nft is sold.");
}
Icontent.item memory Item;
item.name =itemname;
item.magic = magic;
item.speed -= uint256 (keccak256(abi.encodePacked(newItemId.msg.sender.difficuloty,block.timestamp));
require(success,"withdrawl failed");
